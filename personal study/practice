import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_california_housing

#1. 데이터
datasets = fetch_california_housing()
x = datasets.data
y = datasets.target

x_train, x_test, y_train, y_test = train_test_split(
    x, y, train_size= 0.8, shuffle = True, random_state=123)
  

#2. 모델구성
model = Sequential()
model.add(Dense(100, input_shape = (8,), activation = 'linear'))
model.add(Dense(100, activation= 'relu'))
model.add(Dense(100, activation= 'linear'))
model.add(Dense(100, activation= 'relu'))
model.add(Dense(100, activation= 'relu'))
model.add(Dense(100, activation= 'linear'))
model.add(Dense(80, activation= 'linear'))
model.add(Dense(50, activation= 'linear'))
model.add(Dense(20, activation= 'linear'))
model.add(Dense(1, activation= 'linear'))

#3. 컴파일, 훈련
model.compile(loss= 'mse' , optimizer='adam', metrics=['mae'])
from tensorflow.keras.callbacks import EarlyStopping
es = EarlyStopping(monitor= 'val_loss',
                              mode='min',
                              patience=20,
                              verbose=2)
hist = model.fit(x_train, y_train, epochs=200, batch_size=32,
                validation_split=0.2,
                callbacks=[es],
                verbose=2)

# 4. 예측, 평가
loss = model.evaluate(x_test, y_test)
print('loss : ', loss)

y_predict = model.predict(x_test)
print('y_predict : ', y_predict)
print(y_predict.shape)

# 5. 시각화
# import matplotlib.pylab as plt
# plt.figure(figsize=(8,5))
# plt.plot(hist.history['loss'], c = 'red', label= 'loss')
# plt.plot(hist.history['val_loss'], c = 'blue', label= 'loss')
# plt.grid()
# plt.xlabel('epochs')
# plt.ylabel('loss')
# plt.title('califonia practice')
# plt.legend(loc = 'upper right')
# plt.show()
